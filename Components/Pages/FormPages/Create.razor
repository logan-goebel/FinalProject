@page "/forms/create"
@using Microsoft.EntityFrameworkCore
@using AdoptionWebsiteTest.Models
@inject IDbContextFactory<AdoptionWebsiteTest.Data.AdoptionWebsiteTestContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Form</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Form" OnValidSubmit="AddForm" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="fullname" class="form-label">FullName:</label> 
                <InputText id="fullname" @bind-Value="Form.FullName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.FullName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="Form.Email" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="phonenumber" class="form-label">PhoneNumber:</label> 
                <InputNumber id="phonenumber" @bind-Value="Form.PhoneNumber" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.PhoneNumber" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label> 
                <InputText id="address" @bind-Value="Form.Address" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.Address" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="city" class="form-label">City:</label> 
                <InputText id="city" @bind-Value="Form.City" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.City" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="state" class="form-label">State:</label> 
                <InputText id="state" @bind-Value="Form.State" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.State" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="housesize" class="form-label">HouseSize:</label> 
                <InputText id="housesize" @bind-Value="Form.HouseSize" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Form.HouseSize" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="numberofpets" class="form-label">NumberOfPets:</label> 
                <InputNumber id="numberofpets" @bind-Value="Form.NumberOfPets" class="form-control" /> 
                <ValidationMessage For="() => Form.NumberOfPets" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="previousdogowner" class="form-label">PreviousDogOwner:</label> 
                <InputCheckbox id="previousdogowner" @bind-Value="Form.PreviousDogOwner" class="form-check-input" /> 
                <ValidationMessage For="() => Form.PreviousDogOwner" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="questionsconcerns" class="form-label">QuestionsConcerns:</label> 
                <InputText id="questionsconcerns" @bind-Value="Form.QuestionsConcerns" class="form-control" /> 
                <ValidationMessage For="() => Form.QuestionsConcerns" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/forms">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Form Form { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddForm()
    {
        using var context = DbFactory.CreateDbContext();
        context.Form.Add(Form);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/forms");
    }
}
