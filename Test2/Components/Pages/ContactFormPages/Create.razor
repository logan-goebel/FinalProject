@page "/contactforms/create"
@using Microsoft.EntityFrameworkCore
@using AdoptionWebsiteTest.Models
@inject IDbContextFactory<Test2.Data.Test2Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>ContactForm</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="ContactForm" OnValidSubmit="AddContactForm" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="ContactForm.Email" class="form-control" aria-required="true" />
                <ValidationMessage For="() => ContactForm.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="questionsandconcerns" class="form-label">QuestionsAndConcerns:</label>
                <InputText id="questionsandconcerns" @bind-Value="ContactForm.QuestionsAndConcerns" class="form-control" aria-required="true" />
                <ValidationMessage For="() => ContactForm.QuestionsAndConcerns" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/contactus">Back</a>
</div>

@code {
    [SupplyParameterFromForm]
    private ContactForm ContactForm { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddContactForm()
    {
        using var context = DbFactory.CreateDbContext();
        context.ContactForm.Add(ContactForm);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/contactforms");
    }
}

